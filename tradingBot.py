import random
import asyncio
import logging
import config
import datetime

from aiogram import Bot, Dispatcher
from aiogram.enums.parse_mode import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram import types, F, Router
from aiogram.types import Message
from aiogram.filters import Command
from pymongo.mongo_client import MongoClient


router = Router()


uri = "mongodb+srv://desh2808:desh2808@clusterserverbot.1urry1n.mongodb.net/" \
      "?retryWrites=true&w=majority"
client = MongoClient(uri)
db = client.db_binance
collections_users = db.document_users
collections_lectures = db.document_lectures

@router.message(Command("start"))
async def start_handler(msg: Message):
    await msg.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {msg.from_user.username}üëã! –Ø –≤–∞—à —á–∞—Ç-–±–æ—Ç, —è –ø–æ–º–æ–≥—É –í–∞–º "
                     f"–ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ª–µ–∫—Ü–∏–π. –î–ª—è –Ω–∞—á–∞–ª–∞ –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ "
                     f"–±—ã—Å—Ç—Ä—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –≤–≤–µ–¥–∏—Ç–µ –≤ –ø–æ–ª–µ —Å–≤–æ–π email, –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º "
                     f"–í–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω  –ø–æ –Ω–µ–º—É —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø!")


@router.message()
async def message_handler(msg: Message):
    ID = random.randint(1, 1000000)
    if msg.text == '/add':
        date = datetime.datetime.now()
        access_data = [
            {'Date': date,
             'ID_for_user': ID,
             'link': input('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π –≥—É–≥–ª–¥–∏—Å–∫: ')}
        ]
        collections_lectures.insert_many(access_data)
        await msg.answer(f"–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É {ID}")
    else:
        user_info = collections_users.find_one({'ID': msg.from_user.id})
        access_link = collections_lectures.find({})
        for document in access_link:
            if user_info is None:
                user_ID = msg.from_user.id
                user_name = msg.from_user.username
                user_email = msg.text
                data = [
                    {'ID': user_ID,
                     'name': user_name,
                     'email': user_email,
                     'access': document,
                     'date_enter': datetime.datetime.now()}
                ]
                collections_users.insert_many(data)
                await msg.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º {msg.from_user.username}! "
                                 f"–í–∞—à –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ª–µ–∫—Ü–∏–π: {document['link']} ‚Äî –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ "
                                 f"—ç—Ç–æ–π —Å—Å—ã–ª–∫–µ. –ñ–µ–ª–∞–µ–º –í–∞–º —É—Å–ø–µ—Ö–æ–≤ –≤ –∏–∑—É—á–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞!ü§û")
            else:
                await msg.answer(f"–ò–∑–≤–∏–Ω–∏—Ç–µ, {msg.from_user.username}, –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –í–∞–º —É–∂–µ "
                                 f"–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –ª–µ–∫—Ü–∏—è–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–≤–æ—é —Å—Ç–µ–Ω–æ–≥—Ä–∞–º–º—É "
                                 f"–≤ —á–∞—Ç–µ –≤—ã—à–µ –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º —Ä–∞–Ω–µ–µ —Å—Å—ã–ª–∫–∞–º. "
                                 f"–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!üôå")


async def main():
    bot = Bot(token=config.code_token, parse_mode=ParseMode.HTML)
    dp = Dispatcher(storage=MemoryStorage())
    dp.include_router(router)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())

